/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.yanncebron.intellipikchr.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.yanncebron.intellipikchr.lang.psi.PikchrTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/yann/idea-ultimate/IntelliPikchr/src/main/grammar/_PikchrLexer.flex</tt>
 */
class _PikchrLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\5\3\1\5\71\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\5\1\6\1\2\22\0\1\1\1\0\1\10\1\3\1\67\1\66\1\57\1\0\1\70\1"+
    "\71\1\7\1\76\1\64\1\52\1\13\1\4\1\14\11\12\1\65\1\60\1\51\1\77\1\54\1\0\1"+
    "\22\6\20\24\17\1\74\1\11\1\75\1\21\1\24\1\21\1\32\1\16\1\45\1\41\1\34\1\36"+
    "\1\37\1\40\1\27\1\62\1\61\1\35\1\47\1\30\1\42\1\25\1\63\1\26\1\33\1\31\1\44"+
    "\1\50\1\43\1\15\1\46\1\23\1\72\1\0\1\73\7\0\1\5\242\0\2\5\46\0\1\53\1\0\1"+
    "\55\1\0\1\56\53\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\10\1\12\1\13\1\14\1\1"+
    "\4\13\1\15\1\16\1\13\1\17\1\20\6\13\1\21"+
    "\1\13\1\22\1\23\2\13\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\1\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\0\1\47\1\50\1\0\1\51\2\0\1\52\1\0"+
    "\7\13\1\53\1\13\1\54\1\13\1\55\2\13\1\56"+
    "\3\13\1\57\1\60\5\13\1\61\1\13\1\62\14\13"+
    "\1\63\1\64\5\13\1\65\4\13\1\66\6\13\1\67"+
    "\6\13\1\70\1\71\1\72\2\0\1\73\1\74\1\0"+
    "\1\75\1\76\3\13\1\77\1\100\4\13\1\101\1\13"+
    "\1\102\5\13\1\103\1\104\1\105\2\13\1\106\1\107"+
    "\3\13\1\110\6\13\1\111\11\13\1\112\7\13\1\113"+
    "\3\13\1\114\1\115\6\13\1\116\1\13\1\117\1\13"+
    "\1\120\1\121\2\13\1\122\4\0\1\123\4\13\1\124"+
    "\10\13\1\125\1\126\1\13\1\127\6\13\1\130\3\13"+
    "\1\131\1\132\1\13\1\133\1\134\1\135\1\136\1\13"+
    "\1\137\1\13\1\140\1\141\3\13\1\142\3\13\1\143"+
    "\1\144\1\145\1\13\1\146\4\13\1\147\2\13\1\150"+
    "\1\13\4\0\1\13\1\151\2\13\1\152\1\13\1\153"+
    "\1\13\1\154\1\155\1\13\1\156\1\157\1\160\1\161"+
    "\3\13\1\162\1\163\1\164\1\165\1\13\1\166\1\167"+
    "\6\13\1\170\1\171\2\13\1\172\1\173\2\13\4\0"+
    "\1\13\1\174\1\175\1\13\1\176\1\13\1\177\1\13"+
    "\1\200\1\13\1\201\1\13\1\202\2\13\1\203\1\204"+
    "\1\205\1\206\1\207\1\13\1\210\1\0\1\211\1\212"+
    "\2\0\1\213\3\13\1\214\1\215\1\216\2\13\3\0"+
    "\1\217\2\13\1\220\1\221\3\0\1\222\1\223\10\0"+
    "\1\224\1\225\4\0\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\100\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0280\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u0280\0\u07c0\0\u0800\0\u0840\0\u0880\0\100"+
    "\0\100\0\100\0\100\0\u08c0\0\100\0\100\0\100\0\100"+
    "\0\u0340\0\100\0\100\0\100\0\100\0\100\0\100\0\u0900"+
    "\0\u0940\0\u0980\0\100\0\100\0\u0180\0\100\0\u09c0\0\u0200"+
    "\0\u0200\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0c40\0\u0280\0\u0c80\0\u0280\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0280\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0280\0\u0fc0\0\u0280\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u0280\0\u0280\0\u1300\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u0280\0\u1440\0\u1480\0\u14c0\0\u1500\0\u0280\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u0280\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\100\0\100\0\u1880"+
    "\0\u18c0\0\100\0\100\0\u1900\0\u0a00\0\u0280\0\u1940\0\u1980"+
    "\0\u19c0\0\u0280\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u0280\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u0280\0\u0280\0\u1d40\0\u1d80\0\u0280\0\u0280\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u0280\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u0280\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u0280\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u0280"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u0280\0\u26c0"+
    "\0\u0280\0\u2700\0\u0280\0\u0280\0\u2740\0\u2780\0\100\0\u27c0"+
    "\0\u2800\0\u2840\0\u2880\0\100\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u0280\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u0280\0\u0280\0\u2bc0\0\u0280\0\u2c00\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u2d00\0\u2d40\0\u0280\0\u2d80\0\u2dc0\0\u2e00\0\u0280"+
    "\0\u0280\0\u2e40\0\u0280\0\u0280\0\u0280\0\u0280\0\u2e80\0\u0280"+
    "\0\u2ec0\0\u0280\0\u0280\0\u2f00\0\u2f40\0\u2f80\0\u0280\0\u2fc0"+
    "\0\u3000\0\u3040\0\u0280\0\u0280\0\u0280\0\u3080\0\u0280\0\u30c0"+
    "\0\u3100\0\u3140\0\u3180\0\u0280\0\u31c0\0\u3200\0\u0280\0\u3240"+
    "\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u0280\0\u33c0\0\u3400"+
    "\0\u0280\0\u3440\0\u0280\0\u3480\0\u0280\0\u34c0\0\u3500\0\u0280"+
    "\0\u3540\0\u0280\0\u0280\0\u3580\0\u35c0\0\u3600\0\u0280\0\u0280"+
    "\0\u0280\0\u0280\0\u3640\0\u0280\0\u0280\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\u0280\0\u0280\0\u3800\0\u3840\0\u0280"+
    "\0\u0280\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00"+
    "\0\u0280\0\u0280\0\u3a40\0\u0280\0\u3a80\0\u0280\0\u3ac0\0\u0280"+
    "\0\u3b00\0\u0280\0\u3b40\0\u0280\0\u3b80\0\u3bc0\0\u0280\0\u0280"+
    "\0\u0280\0\u0280\0\u0280\0\u3c00\0\u0280\0\u3c40\0\100\0\100"+
    "\0\u3c80\0\u3cc0\0\u0280\0\u3d00\0\u3d40\0\u3d80\0\u0280\0\u0280"+
    "\0\u0280\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u0280\0\u3f00"+
    "\0\u3f40\0\u0280\0\u0280\0\u3f80\0\u3fc0\0\u4000\0\u0280\0\u0280"+
    "\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200"+
    "\0\100\0\100\0\u4240\0\u4280\0\u42c0\0\u4300\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\2\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\3\21\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\101\0\1\3\4\0"+
    "\1\3\71\0\2\5\1\0\2\5\2\0\71\5\4\0"+
    "\1\5\2\0\1\72\67\0\1\73\77\0\1\74\10\75"+
    "\1\76\1\77\66\75\12\0\1\12\1\100\1\12\75\0"+
    "\1\101\1\0\1\101\75\0\1\12\1\100\1\12\1\102"+
    "\74\0\1\21\1\0\5\21\2\0\26\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\103\4\21"+
    "\1\104\5\21\1\105\6\21\10\0\3\21\25\0\2\17"+
    "\1\0\6\17\1\0\26\17\10\0\3\17\10\0\2\17"+
    "\17\0\2\21\4\0\1\21\1\0\24\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\3\21\1\106\22\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\4\21"+
    "\1\107\2\21\1\110\16\21\10\0\1\21\1\111\1\21"+
    "\26\0\1\21\1\0\5\21\2\0\5\21\1\112\1\113"+
    "\17\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\114\5\21\1\115\1\116\5\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\11\21\1\117\3\21"+
    "\1\120\1\21\1\121\6\21\10\0\3\21\26\0\1\21"+
    "\1\0\2\21\1\122\2\21\2\0\3\21\1\123\1\21"+
    "\1\124\1\125\1\21\1\126\1\21\1\127\13\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\2\21\1\130"+
    "\1\21\1\131\1\21\1\132\1\133\1\21\1\134\5\21"+
    "\1\135\1\136\3\21\1\137\1\21\10\0\2\21\1\140"+
    "\26\0\1\21\1\0\5\21\2\0\5\21\1\141\1\21"+
    "\1\142\2\21\1\143\12\21\1\144\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\4\21\1\145\2\21\1\146"+
    "\1\21\1\147\14\21\10\0\1\21\1\150\1\21\26\0"+
    "\1\21\1\0\5\21\2\0\3\21\1\151\1\152\21\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\17\21"+
    "\1\153\6\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\6\21\1\154\2\21\1\155\14\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\156\2\21"+
    "\1\157\1\21\1\160\5\21\1\161\6\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\13\21\1\162\11\21"+
    "\1\163\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\4\21\1\164\2\21\1\165\1\21\1\166\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\2\21\1\167"+
    "\2\21\1\170\20\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\4\21\1\171\4\21\1\172\1\173\2\21"+
    "\1\174\1\21\1\175\1\176\1\21\1\177\1\200\2\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\4\21"+
    "\1\201\2\21\1\202\7\21\1\203\6\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\11\21\1\204\14\21"+
    "\10\0\3\21\66\0\1\205\101\0\1\206\22\0\1\207"+
    "\26\0\1\210\6\0\1\211\141\0\1\212\77\0\1\213"+
    "\7\72\1\214\70\72\2\75\1\0\2\75\2\0\71\75"+
    "\12\0\1\215\1\0\1\215\1\0\1\215\1\0\1\215"+
    "\11\0\1\215\1\0\1\215\1\0\1\215\2\0\1\215"+
    "\3\0\1\215\44\0\1\21\1\0\5\21\2\0\14\21"+
    "\1\216\11\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\6\21\1\217\3\21\1\220\2\21\1\221\10\21"+
    "\10\0\3\21\26\0\1\21\1\0\1\21\1\222\3\21"+
    "\2\0\6\21\1\223\3\21\1\224\13\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\225\4\21"+
    "\1\226\14\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\14\21\1\227\11\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\16\21\1\230\7\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\21\21\1\231\4\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\232\16\21\1\233\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\7\21\1\234\16\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\3\21\1\235\22\21\10\0"+
    "\3\21\26\0\1\21\1\0\1\21\1\236\3\21\2\0"+
    "\26\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\4\21\1\237\4\21\1\240\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\2\21\1\241\23\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\10\21\1\242"+
    "\6\21\1\243\6\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\3\21\1\244\16\21\1\245\3\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\16\21\1\246"+
    "\7\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\10\21\1\247\15\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\4\21\1\250\21\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\12\21\1\251\13\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\5\21\1\252"+
    "\20\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\7\21\1\253\16\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\24\21\1\254\1\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\12\21\1\255\6\21\1\256"+
    "\4\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\7\21\1\257\16\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\3\21\1\260\22\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\16\21\1\261\7\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\10\21\1\262"+
    "\15\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\12\21\1\263\13\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\264\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\5\21\1\265\20\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\10\21\1\266"+
    "\15\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\13\21\1\267\12\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\21\21\1\270\4\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\17\21\1\271\6\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\3\21\1\272"+
    "\2\21\1\273\3\21\1\274\13\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\4\21\1\275\2\21\1\276"+
    "\16\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\7\21\1\277\1\300\15\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\10\21\1\301\15\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\13\21\1\302\12\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\303\11\21\1\304\5\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\7\21\1\305\16\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\306\7\21"+
    "\1\307\7\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\23\21\1\310\2\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\10\21\1\311\15\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\312\17\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\3\21"+
    "\1\313\22\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\5\21\1\314\20\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\17\21\1\315\6\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\17\21\1\316\6\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\10\21"+
    "\1\317\1\21\1\320\13\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\20\21\1\321\5\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\12\21\1\322\13\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\5\21"+
    "\1\323\20\21\10\0\3\21\26\0\1\21\1\0\1\21"+
    "\1\324\3\21\2\0\26\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\25\21\1\325\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\3\21\1\326\22\21\10\0"+
    "\3\21\70\0\1\327\52\0\1\330\2\0\1\331\77\0"+
    "\1\332\1\0\1\333\43\0\4\72\1\334\2\72\1\214"+
    "\70\72\12\0\1\21\1\0\5\21\2\0\20\21\1\335"+
    "\5\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\17\21\1\336\6\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\4\21\1\337\21\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\6\21\1\340\17\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\16\21\1\341"+
    "\7\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\5\21\1\342\20\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\25\21\1\343\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\15\21\1\344\10\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\345\21\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\10\21"+
    "\1\346\15\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\4\21\1\347\21\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\12\21\1\350\13\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\351\17\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\352\17\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\5\21\1\353\14\21\1\354\3\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\5\21\1\355\20\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\25\21"+
    "\1\356\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\17\21\1\357\6\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\360\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\14\21\1\361\11\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\4\21\1\362"+
    "\21\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\3\21\1\363\22\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\364\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\4\21\1\365\21\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\6\21\1\366"+
    "\17\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\12\21\1\367\13\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\6\21\1\370\17\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\6\21\1\371\17\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\4\21\1\372"+
    "\21\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\5\21\1\373\20\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\374\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\6\21\1\375\17\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\6\21\1\376"+
    "\17\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\10\21\1\377\15\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\24\21\1\u0100\1\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\10\21\1\u0101\15\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\11\21\1\u0102"+
    "\1\u0103\13\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\14\21\1\u0104\11\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\16\21\1\u0105\7\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\24\21\1\u0106\1\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\u0107\17\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\15\21\1\u0108\10\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\4\21\1\u0109\21\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\u010a\17\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\5\21"+
    "\1\u010b\20\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\12\21\1\u010c\13\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\15\21\1\u010d\10\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\u010e\17\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\u010f\17\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\4\21\1\u0110\21\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\22\21\1\u0111\3\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\6\21\1\u0112\17\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\10\21"+
    "\1\u0113\15\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\2\21\1\u0114\23\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\17\21\1\u0115\6\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\u0116\21\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\11\21"+
    "\1\u0117\14\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\6\21\1\u0118\17\21\10\0\3\21\53\0\1\u0119"+
    "\66\0\1\u011a\77\0\1\u011b\107\0\1\u011c\53\0\1\21"+
    "\1\0\5\21\2\0\11\21\1\u011d\14\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\20\21\1\u011e\5\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\5\21"+
    "\1\u011f\20\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\17\21\1\u0120\6\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\6\21\1\u0121\17\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\4\21\1\u0122\21\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\6\21"+
    "\1\u0123\17\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\21\21\1\u0124\4\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\6\21\1\u0125\17\21\10\0\3\21"+
    "\26\0\1\21\1\0\5\21\2\0\10\21\1\u0126\15\21"+
    "\10\0\3\21\26\0\1\21\1\0\5\21\2\0\4\21"+
    "\1\u0127\21\21\10\0\3\21\26\0\1\21\1\0\5\21"+
    "\2\0\15\21\1\u0128\10\21\10\0\3\21\26\0\1\21"+
    "\1\0\5\21\2\0\26\21\10\0\1\u0129\2\21\26\0"+
    "\1\21\1\0\5\21\2\0\11\21\1\u012a\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\20\21\1\u012b"+
    "\5\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\3\21\1\u012c\22\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\5\21\1\u012d\20\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\5\21\1\u012e\20\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\6\21\1\u012f"+
    "\17\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\16\21\1\u0130\7\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\15\21\1\u0131\10\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\12\21\1\u0132\13\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\2\21\1\u0133"+
    "\23\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\6\21\1\u0134\17\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\6\21\1\u0135\17\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\15\21\1\u0136\10\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\4\21\1\u0137"+
    "\21\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\u0138\14\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\u0139\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\5\21\1\u013a\20\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\11\21\1\u013b"+
    "\14\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\15\21\1\u013c\10\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\12\21\1\u013d\13\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\12\21\1\u013e\13\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\11\21\1\u013f"+
    "\14\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\u0140\14\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\3\21\1\u0141\22\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\5\21\1\u0142\20\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\11\21\1\u0143"+
    "\14\21\10\0\3\21\54\0\1\u0144\65\0\1\u0145\77\0"+
    "\1\u0146\102\0\1\u0147\60\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\u0148\14\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\16\21\1\u0149\7\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\24\21\1\u014a\1\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\17\21\1\u014b"+
    "\6\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\10\21\1\u014c\15\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\4\21\1\u014d\21\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\22\21\1\u014e\3\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\5\21\1\u014f"+
    "\20\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\6\21\1\u0150\17\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\11\21\1\u0151\14\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\11\21\1\u0152\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\10\21\1\u0153"+
    "\15\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\6\21\1\u0154\17\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\5\21\1\u0155\20\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\6\21\1\u0156\17\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\16\21\1\u0157"+
    "\7\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\u0158\14\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\16\21\1\u0159\7\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\11\21\1\u015a\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\3\21\1\u015b"+
    "\22\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\16\21\1\u015c\7\21\10\0\3\21\26\0\1\21\1\0"+
    "\1\21\1\u015d\3\21\2\0\26\21\10\0\3\21\45\0"+
    "\1\u015e\126\0\1\u015f\77\0\1\u0160\45\0\1\u0161\3\0"+
    "\1\u0162\57\0\1\21\1\0\5\21\2\0\5\21\1\u0163"+
    "\20\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\21\21\1\u0164\4\21\10\0\3\21\26\0\1\21\1\0"+
    "\2\21\1\u0165\2\21\2\0\26\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\11\21\1\u0166\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\16\21\1\u0167"+
    "\7\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\11\21\1\u0168\14\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\14\21\1\u0169\11\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\11\21\1\u016a\14\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\11\21\1\u016b"+
    "\14\21\10\0\3\21\46\0\1\u016c\74\0\1\u016d\76\0"+
    "\1\u016e\63\0\1\21\1\0\5\21\2\0\10\21\1\u016f"+
    "\15\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\12\21\1\u0170\13\21\10\0\3\21\26\0\1\21\1\0"+
    "\5\21\2\0\10\21\1\u0171\15\21\10\0\3\21\26\0"+
    "\1\21\1\0\5\21\2\0\3\21\1\u0172\22\21\10\0"+
    "\3\21\26\0\1\21\1\0\5\21\2\0\3\21\1\u0173"+
    "\22\21\10\0\3\21\42\0\1\u0174\110\0\1\u0175\66\0"+
    "\1\u0176\63\0\1\21\1\0\5\21\2\0\11\21\1\u0177"+
    "\14\21\10\0\3\21\26\0\1\21\1\0\5\21\2\0"+
    "\10\21\1\u0178\15\21\10\0\3\21\42\0\1\u0179\111\0"+
    "\1\u017a\101\0\1\u017b\77\0\1\u017c\66\0\1\u017d\111\0"+
    "\1\u017e\77\0\1\u017f\66\0\1\u0180\125\0\1\u0181\77\0"+
    "\1\u0182\45\0\1\u0183\77\0\1\u0184\113\0\1\u0185\100\0"+
    "\1\u0186\114\0\1\u0187\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\1\11\36\1\4\11"+
    "\1\1\4\11\1\1\6\11\2\1\1\0\2\11\1\0"+
    "\1\11\2\0\1\1\1\0\103\1\2\11\2\0\2\11"+
    "\1\0\112\1\1\11\4\0\1\11\74\1\4\0\47\1"+
    "\4\0\26\1\1\0\2\11\2\0\11\1\3\0\5\1"+
    "\3\0\2\1\10\0\2\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PikchrLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PikchrLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 151: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 152: break;
          case 3: 
            { return LINEFEED;
            } 
            // fall through
          case 153: break;
          case 4: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 154: break;
          case 5: 
            { return DIV;
            } 
            // fall through
          case 155: break;
          case 6: 
            { return MUL;
            } 
            // fall through
          case 156: break;
          case 7: 
            { return BACKSLASH;
            } 
            // fall through
          case 157: break;
          case 8: 
            { return DECIMAL;
            } 
            // fall through
          case 158: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 159: break;
          case 10: 
            { return X;
            } 
            // fall through
          case 160: break;
          case 11: 
            { return VARIABLE;
            } 
            // fall through
          case 161: break;
          case 12: 
            { return LABEL;
            } 
            // fall through
          case 162: break;
          case 13: 
            { return N;
            } 
            // fall through
          case 163: break;
          case 14: 
            { return T;
            } 
            // fall through
          case 164: break;
          case 15: 
            { return S;
            } 
            // fall through
          case 165: break;
          case 16: 
            { return E;
            } 
            // fall through
          case 166: break;
          case 17: 
            { return W;
            } 
            // fall through
          case 167: break;
          case 18: 
            { return C;
            } 
            // fall through
          case 168: break;
          case 19: 
            { return Y;
            } 
            // fall through
          case 169: break;
          case 20: 
            { return LT;
            } 
            // fall through
          case 170: break;
          case 21: 
            { return MINUS;
            } 
            // fall through
          case 171: break;
          case 22: 
            { return ARROW_HEAD_BEGIN_SINGLE;
            } 
            // fall through
          case 172: break;
          case 23: 
            { return GT;
            } 
            // fall through
          case 173: break;
          case 24: 
            { return ARROW_HEAD_END_SINGLE;
            } 
            // fall through
          case 174: break;
          case 25: 
            { return ARROW_HEAD_BOTH_SINGLE;
            } 
            // fall through
          case 175: break;
          case 26: 
            { return SEMICOLON;
            } 
            // fall through
          case 176: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 177: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 178: break;
          case 29: 
            { return PERCENT;
            } 
            // fall through
          case 179: break;
          case 30: 
            { return DOLLAR;
            } 
            // fall through
          case 180: break;
          case 31: 
            { return ROUND_L;
            } 
            // fall through
          case 181: break;
          case 32: 
            { return ROUND_R;
            } 
            // fall through
          case 182: break;
          case 33: 
            { return BRACES_L;
            } 
            // fall through
          case 183: break;
          case 34: 
            { return BRACES_R;
            } 
            // fall through
          case 184: break;
          case 35: 
            { return BRACKET_L;
            } 
            // fall through
          case 185: break;
          case 36: 
            { return BRACKET_R;
            } 
            // fall through
          case 186: break;
          case 37: 
            { return PLUS;
            } 
            // fall through
          case 187: break;
          case 38: 
            { return EQUAL;
            } 
            // fall through
          case 188: break;
          case 39: 
            { return DIV_EQUAL;
            } 
            // fall through
          case 189: break;
          case 40: 
            { return MUL_EQUAL;
            } 
            // fall through
          case 190: break;
          case 41: 
            { return STRING;
            } 
            // fall through
          case 191: break;
          case 42: 
            { return FLOAT;
            } 
            // fall through
          case 192: break;
          case 43: 
            { return IN;
            } 
            // fall through
          case 193: break;
          case 44: 
            { return NE;
            } 
            // fall through
          case 194: break;
          case 45: 
            { return NW;
            } 
            // fall through
          case 195: break;
          case 46: 
            { return TO;
            } 
            // fall through
          case 196: break;
          case 47: 
            { return AT;
            } 
            // fall through
          case 197: break;
          case 48: 
            { return AS;
            } 
            // fall through
          case 198: break;
          case 49: 
            { return SE;
            } 
            // fall through
          case 199: break;
          case 50: 
            { return SW;
            } 
            // fall through
          case 200: break;
          case 51: 
            { return GO;
            } 
            // fall through
          case 201: break;
          case 52: 
            { return HT;
            } 
            // fall through
          case 202: break;
          case 53: 
            { return OF;
            } 
            // fall through
          case 203: break;
          case 54: 
            { return UP;
            } 
            // fall through
          case 204: break;
          case 55: 
            { return CW;
            } 
            // fall through
          case 205: break;
          case 56: 
            { return ARROW_HEAD_BEGIN;
            } 
            // fall through
          case 206: break;
          case 57: 
            { return ARROW_HEAD_END;
            } 
            // fall through
          case 207: break;
          case 58: 
            { return MINUS_EQUAL;
            } 
            // fall through
          case 208: break;
          case 59: 
            { return PLUS_EQUAL;
            } 
            // fall through
          case 209: break;
          case 60: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 210: break;
          case 61: 
            { return HEX;
            } 
            // fall through
          case 211: break;
          case 62: 
            { return BIG;
            } 
            // fall through
          case 212: break;
          case 63: 
            { return BOX;
            } 
            // fall through
          case 213: break;
          case 64: 
            { return BOT;
            } 
            // fall through
          case 214: break;
          case 65: 
            { return RAD;
            } 
            // fall through
          case 215: break;
          case 66: 
            { return INT;
            } 
            // fall through
          case 216: break;
          case 67: 
            { return THE;
            } 
            // fall through
          case 217: break;
          case 68: 
            { return TOP;
            } 
            // fall through
          case 218: break;
          case 69: 
            { return ABS;
            } 
            // fall through
          case 219: break;
          case 70: 
            { return ARC;
            } 
            // fall through
          case 220: break;
          case 71: 
            { return AND;
            } 
            // fall through
          case 221: break;
          case 72: 
            { return SIN;
            } 
            // fall through
          case 222: break;
          case 73: 
            { return END;
            } 
            // fall through
          case 223: break;
          case 74: 
            { return FIT;
            } 
            // fall through
          case 224: break;
          case 75: 
            { return DOT_OBJECT;
            } 
            // fall through
          case 225: break;
          case 76: 
            { return WID;
            } 
            // fall through
          case 226: break;
          case 77: 
            { return WAY;
            } 
            // fall through
          case 227: break;
          case 78: 
            { return COS;
            } 
            // fall through
          case 228: break;
          case 79: 
            { return CCW;
            } 
            // fall through
          case 229: break;
          case 80: 
            { return MIN;
            } 
            // fall through
          case 230: break;
          case 81: 
            { return MAX;
            } 
            // fall through
          case 231: break;
          case 82: 
            { return ARROW_HEAD_BOTH;
            } 
            // fall through
          case 232: break;
          case 83: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 233: break;
          case 84: 
            { return BOLD;
            } 
            // fall through
          case 234: break;
          case 85: 
            { return TEXT;
            } 
            // fall through
          case 235: break;
          case 86: 
            { return THIN;
            } 
            // fall through
          case 236: break;
          case 87: 
            { return THEN;
            } 
            // fall through
          case 237: break;
          case 88: 
            { return SAME;
            } 
            // fall through
          case 238: break;
          case 89: 
            { return SQRT;
            } 
            // fall through
          case 239: break;
          case 90: 
            { return EAST;
            } 
            // fall through
          case 240: break;
          case 91: 
            { return EVEN;
            } 
            // fall through
          case 241: break;
          case 92: 
            { return LINE;
            } 
            // fall through
          case 242: break;
          case 93: 
            { return LAST;
            } 
            // fall through
          case 243: break;
          case 94: 
            { return LEFT;
            } 
            // fall through
          case 244: break;
          case 95: 
            { return FROM;
            } 
            // fall through
          case 245: break;
          case 96: 
            { return FILE;
            } 
            // fall through
          case 246: break;
          case 97: 
            { return FILL;
            } 
            // fall through
          case 247: break;
          case 98: 
            { return DIST;
            } 
            // fall through
          case 248: break;
          case 99: 
            { return DOWN;
            } 
            // fall through
          case 249: break;
          case 100: 
            { return OVAL;
            } 
            // fall through
          case 250: break;
          case 101: 
            { return WITH;
            } 
            // fall through
          case 251: break;
          case 102: 
            { return WEST;
            } 
            // fall through
          case 252: break;
          case 103: 
            { return CHOP;
            } 
            // fall through
          case 253: break;
          case 104: 
            { return MOVE;
            } 
            // fall through
          case 254: break;
          case 105: 
            { return BELOW;
            } 
            // fall through
          case 255: break;
          case 106: 
            { return PRINT;
            } 
            // fall through
          case 256: break;
          case 107: 
            { return RIGHT;
            } 
            // fall through
          case 257: break;
          case 108: 
            { return RJUST;
            } 
            // fall through
          case 258: break;
          case 109: 
            { return INVIS;
            } 
            // fall through
          case 259: break;
          case 110: 
            { return NORTH;
            } 
            // fall through
          case 260: break;
          case 111: 
            { return THICK;
            } 
            // fall through
          case 261: break;
          case 112: 
            { return ABOVE;
            } 
            // fall through
          case 262: break;
          case 113: 
            { return ARROW;
            } 
            // fall through
          case 263: break;
          case 114: 
            { return START;
            } 
            // fall through
          case 264: break;
          case 115: 
            { return SOLID;
            } 
            // fall through
          case 265: break;
          case 116: 
            { return SOUTH;
            } 
            // fall through
          case 266: break;
          case 117: 
            { return SMALL;
            } 
            // fall through
          case 267: break;
          case 118: 
            { return LJUST;
            } 
            // fall through
          case 268: break;
          case 119: 
            { return FIRST;
            } 
            // fall through
          case 269: break;
          case 120: 
            { return WIDTH;
            } 
            // fall through
          case 270: break;
          case 121: 
            { return UNTIL;
            } 
            // fall through
          case 271: break;
          case 122: 
            { return CLOSE;
            } 
            // fall through
          case 272: break;
          case 123: 
            { return COLOR;
            } 
            // fall through
          case 273: break;
          case 124: 
            { return BEHIND;
            } 
            // fall through
          case 274: break;
          case 125: 
            { return BOTTOM;
            } 
            // fall through
          case 275: break;
          case 126: 
            { return RADIUS;
            } 
            // fall through
          case 276: break;
          case 127: 
            { return ITALIC;
            } 
            // fall through
          case 277: break;
          case 128: 
            { return ASSERT;
            } 
            // fall through
          case 278: break;
          case 129: 
            { return SPLINE;
            } 
            // fall through
          case 279: break;
          case 130: 
            { return HEIGHT;
            } 
            // fall through
          case 280: break;
          case 131: 
            { return DASHED;
            } 
            // fall through
          case 281: break;
          case 132: 
            { return DEFINE;
            } 
            // fall through
          case 282: break;
          case 133: 
            { return DOTTED;
            } 
            // fall through
          case 283: break;
          case 134: 
            { return CIRCLE;
            } 
            // fall through
          case 284: break;
          case 135: 
            { return CENTER;
            } 
            // fall through
          case 285: break;
          case 136: 
            { return VERTEX;
            } 
            // fall through
          case 286: break;
          case 137: 
            { return ARROW_RARR;
            } 
            // fall through
          case 287: break;
          case 138: 
            { return ARROW_LARR;
            } 
            // fall through
          case 288: break;
          case 139: 
            { return BETWEEN;
            } 
            // fall through
          case 289: break;
          case 140: 
            { return ALIGNED;
            } 
            // fall through
          case 290: break;
          case 141: 
            { return ELLIPSE;
            } 
            // fall through
          case 291: break;
          case 142: 
            { return HEADING;
            } 
            // fall through
          case 292: break;
          case 143: 
            { return PREVIOUS;
            } 
            // fall through
          case 293: break;
          case 144: 
            { return DIAMETER;
            } 
            // fall through
          case 294: break;
          case 145: 
            { return CYLINDER;
            } 
            // fall through
          case 295: break;
          case 146: 
            { return INVISIBLE;
            } 
            // fall through
          case 296: break;
          case 147: 
            { return THICKNESS;
            } 
            // fall through
          case 297: break;
          case 148: 
            { return ARROW_LEFT_ARROW;
            } 
            // fall through
          case 298: break;
          case 149: 
            { return ARROW_RIGHT_ARROW;
            } 
            // fall through
          case 299: break;
          case 150: 
            { return ARROW_LEFT_RIGHT_ARROW;
            } 
            // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
